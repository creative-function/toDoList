{"version":3,"sources":["todo-list.js"],"names":["TodoList","doneCount","document","querySelector","completedItems","taskList","filter","value","console","log","done","innerHTML","length","newTask","taskCount","itemContainer","checkbox","hidingTasks","addEventListener","item","TodoItem","push","render","classList","add","remove","window","newTaskValue","taskBox","bttn","createElement","appendChild","dispatchEvent","Event"],"mappings":"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","sourcesContent":["\n// Todo List is our main class that does everything\nclass TodoList {\n    \n    constructor(){\n        console.log('TodoList()');\n        //sequence of what needs to happen:\n        //1. figure out where to store things , i.e setup some inital vairables.  \n        \n\n        // declaring a vairable with *this* makes it accessible to the entire class \n        this.taskList = [];\n\n        let newTask = document.querySelector('[name=\"new-todo\"]');\n\n        \n        let taskCount = document.querySelector('.task-cnt');\n        \n        let itemContainer = document.querySelector('.todo-items');\n\n        let checkbox = document.querySelector('[type=\"checkbox\"]');\n\n        let hidingTasks = true;\n        \n        //2. hook up listeners to the DOM elements\n        //2a. keyup for todo field\n        \n        newTask.addEventListener('change',()=>{\n            \n            //2b. mouselick  or toggle the completed items checkbox\n            //3. setup and manage the list of todoItems as they are created \n                //3a. setup an array to store tasks \n            const item = new TodoItem(newTask.value);\n            this.taskList.push(item);\n            //4 when 2a. is triggered, \n                //4a. add the item to the 3a.array\n                //4b. update the count of items \n            taskCount.innerHTML = this.taskList.length;\n\n            this.render();\n            //5 then call render() [aka update (the array), refresh, make these changes etc.]  \n                // this should be the only method in our TodoList cass that modifies DOM changes \n\n\n        })\n\n        checkbox.addEventListener('click',()=>{\n            console.log(\"checkbox items showing: \", hidingTasks);\n            \n            hidingTasks = !hidingTasks;\n            if(!hidingTasks){\n                itemContainer.classList.add('show-completed');\n            }else{\n                itemContainer.classList.remove('show-completed');\n            }\n\n            this.render();\n        })\n\n        window.addEventListener('item-updated', this.render)\n    }\n\n    render = () => {\n        //loop over our list of items\n        // if checbox/toggle true, show all completed items\n        //update the DOM with any changes for the list \n        \n        let doneCount = document.querySelector('.done-cnt');\n\n       var completedItems = this.taskList.filter(value => {\n           console.log(\"this is value: \" , value);\n          \n            return value.done\n        })\n\n        doneCount.innerHTML = completedItems.length;\n    }\n}\n//TodoItem represens and individual todo item in our list \n\n\nclass TodoItem {\n\n    //newTaskValue is the parameter that acceeps newTask.value line 29\n    constructor(newTaskValue){\n\n        this.newTaskValue = newTaskValue;\n\n        console.log('TodoItem() value is: ' + newTaskValue);\n\n        //sequence of what needs to happen:\n        //1. need to create a div for the item \n        //      which includes a done button to mark it complete \"done/undone\"\n        this.taskBox = document.createElement('div');\n        this.bttn = document.createElement('button');\n\n        let itemContainer = document.querySelector('.todo-items');\n\n\n        // this.completed = [];\n\n\n        //4. setup a variabe to keep track of if this item is complete or not (boolean)\n        this.done = false;\n\n        this.bttn.innerHTML = \"Done\";\n        this.taskBox.innerHTML = newTaskValue;\n\n        //add a class for styling\n\n        this.taskBox.classList.add('undone');\n       \n        //2. add it to the DOM \n        itemContainer.appendChild(this.taskBox);\n        this.taskBox.appendChild(this.bttn);\n\n        //3. add an event listener to the \"done/undone\" button\n        this.bttn.addEventListener('click',()=>{\n            // this toggles true or false. if true, turn false and vice versa \n            \n            this.done = !this.done;\n\n            \n            //update changes with every click \n            this.render();\n            \n            window.dispatchEvent(new Event('item-updated'))\n            \n            \n        })\n        \n        \n    }\n    \n    render = () => {\n        console.log( this.newTaskValue + ' rendered', this.done)\n        //updates the DOM with any changes for the list \n        if(this.done){ //if  done \n            this.taskBox.classList.remove('undone'); // remove this class\n            this.taskBox.classList.add('done'); // add this class\n            this.bttn.innerHTML = \"Undo\"; //change button to say\n        }else{\n            this.taskBox.classList.remove('done'); //remove this class\n            this.taskBox.classList.add('undone'); //add this class\n            this.bttn.innerHTML = \"Done\"; //change button to say\n            // this.completed.push(newTaskValue); // add to \"completed\" array \n            \n        }\n\n        //modify what the DOM element recognizes as \"done/undone\"\n            //styling: a completed item should have strikethrough\n            // the button label changed from done to undone \n        \n\n    }\n\n}\n\n\n//for styling, assign a class to \"done/undone\" status and then have styling waiting on class mark. "],"file":"todo-list.js"}