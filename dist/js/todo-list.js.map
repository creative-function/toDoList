{"version":3,"sources":["todo-list.js"],"names":["TodoList","console","log","taskList","newTask","document","querySelector","taskCount","checkbox","hidingTasks","addEventListener","item","TodoItem","value","push","innerHTML","length","render","doneTasks","classList","add","remove","newTaskValue","done","taskBox","createElement","bttn","completed","doneCount","body","appendChild"],"mappings":"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","sourcesContent":["\n// Todo List is our main class that does everything\nclass TodoList {\n    \n    constructor(){\n        console.log('TodoList()');\n        //sequence of what needs to happen:\n        //1. figure out where to store things , i.e setup some inital vairables.  \n        \n\n        // declaring a vairable with *this* makes it accessible to the entire class \n        this.taskList = [];\n\n        let newTask = document.querySelector('[name=\"new-todo\"]');\n\n        \n        let taskCount = document.querySelector('.task-cnt');\n        \n        \n        let checkbox = document.querySelector('[type=\"checkbox\"]');\n\n        let hidingTasks = true;\n        \n        //2. hook up listeners to the DOM elements\n        //2a. keyup for todo field\n        \n        newTask.addEventListener('change',()=>{\n            \n            //2b. mouselick  or toggle the completed items checkbox\n            //3. setup and manage the list of todoItems as they are created \n                //3a. setup an array to store tasks \n            const item = new TodoItem(newTask.value);\n            this.taskList.push(item);\n            //4 when 2a. is triggered, \n                //4a. add the item to the 3a.array\n                //4b. update the count of items \n            taskCount.innerHTML = this.taskList.length;\n\n            this.render();\n            //5 then call render() [aka update (the array), refresh, make these changes etc.]  \n                // this should be the only method in our TodoList cass that modifies DOM changes \n\n\n        })\n\n        checkbox.addEventListener('click',()=>{\n            console.log(\"checkbox items showing: \", hidingTasks);\n            \n            let doneTasks = document.querySelector('.done');\n            \n            hidingTasks = !hidingTasks;\n\n            if(!hidingTasks){\n                doneTasks.classList.add('show');\n            }else if(hidingTasks){\n                doneTasks.classList.remove('show');\n            }\n\n        \n            this.render();\n        })\n    }\n\n    render = () => {\n        //loop over our list of items\n        // if checbox/toggle true, show all completed items\n        //update the DOM with any changes for the list \n        \n        console.log(\"tasks are: \", this.taskList);\n    }\n}\n//TodoItem represens and individual todo item in our list \n\n\nclass TodoItem {\n\n    //newTaskValue is the parameter that acceeps newTask.value line 29\n    constructor(newTaskValue){\n\n        this.newTaskValue = newTaskValue;\n\n        console.log('TodoItem() value is: ' + newTaskValue);\n\n        //sequence of what needs to happen:\n        //1. need to create a div for the item \n        //      which includes a done button to mark it complete \"done/undone\"\n        let taskBox = document.createElement('div');\n        let bttn = document.createElement('button');\n\n        this.completed = [];\n        let doneCount = document.querySelector('.done-cnt');\n\n\n        //4. setup a variabe to keep track of if this item is complete or not (boolean)\n        this.done = false;\n\n        bttn.innerHTML = \"Done\";\n        taskBox.innerHTML = newTaskValue;\n\n        //add a class for styling\n\n        taskBox.classList.add('undone');\n       \n        //2. add it to the DOM \n        document.body.appendChild(taskBox);\n        taskBox.appendChild(bttn);\n        //3. add an event listener to the \"done/undone\" button\n        bttn.addEventListener('click',()=>{\n            // this toggles true or false. if true, turn false and vice versa \n          this.done = !this.done;\n          if(!this.done){\n            taskBox.classList.remove('undone');\n            taskBox.classList.add('done');\n            bttn.innerHTML = \"Undo\";\n            this.completed.push(newTaskValue);\n            console.log (\"items done: \" , this.completed)\n          }else{\n            taskBox.classList.remove('done');\n            taskBox.classList.add('undone');\n            bttn.innerHTML = \"Done\";\n            \n            console.log (\"items undone: \" , this.completed)\n          }\n\n          doneCount.innerHTML = this.completed.length;\n\n            //update changes with every click \n          this.render();\n         })\n\n\n    }\n\n    render = () => {\n        console.log( this.newTaskValue + ' rendered', this.done)\n        //updates the DOM with any changes for the list \n\n        //modify what the DOM element recognizes as \"done/undone\"\n            //styling: a completed item should have strikethrough\n            // the button label changed from done to undone \n        \n\n    }\n\n}\n\n\n//for styling, assign a class to \"done/undone\" status and then have styling waiting on class mark. "],"file":"todo-list.js"}